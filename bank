#!/usr/bin/env node

const net = require('net')
const { handle_message, send_message, red, green, Customer } = require('./lib/helpers')
const SOCKET = "./bank.sock"
// let Customer = require('./customer')

let connectedTellers = []
let connectedCustomers = []
let customerCount = 1
let openForTheDay = false

/**
 * Alerts each customer of their queue position 
 */
function displayQueuePosition() {
	if (connectedCustomers.length) {
		connectedCustomers.map((customer, index) => {
			// First connected teller means bank is now open!
			if (!openForTheDay) {
				send_message(customer.conn, `The Bank is ${green('open.')}`)
			}

			// Next customer in line
			if (index === 0) {
				send_message(customer.conn, 'You are the next customer to be served.')
			}
			// Every other customer
			else {
				send_message(
					customer.conn,
					`There is ${connectedCustomers.length -
					1} customers in line ahead of you`
				)
			}

		})
	}
	if (!openForTheDay) openForTheDay = true
}

// TCP Server using a Unix socket
const server = net.createServer(conn => {

	handle_message(conn, packet => {
		let message = packet.message
		let type = packet.type

		// Checks for customer connection
		if (message === 'connected' && type === 'customer') {
			console.log('Customer connected')
			const customer = new Customer(customerCount, conn)
			connectedCustomers.push(customer)
			customerCount++

			// No tellers connected
			if (!connectedTellers.length) {
				send_message(conn, `The Bank is ${red('closed.')}`)
			}
		}

		// Checks for teller connection
		else if (message === 'connected' && type === 'teller') {
			console.log('Teller connected')
			connectedTellers.push(conn)

			send_message(conn, 'Good Morning\n')
			send_message(conn, 'You are not serving any customers\n')
			send_message(
				conn,
				`You have ${connectedCustomers.length} customers waiting in line`
			)

			displayQueuePosition()

		}
		else if (message === 'next' && type === 'teller' && connectedCustomers.length) {

			let servingCustomer = connectedCustomers.shift()
			send_message(conn, `You are serving customer #${servingCustomer.customerCount}.`)
			send_message(conn, `You have ${connectedCustomers.length} waiting in line.`)

			displayQueuePosition()

			send_message(conn, '[ CHAT ]\n')
			send_message(servingCustomer.conn, '[ CHAT ]\n')
			send_message(conn, '(you) What can I help you with?\n')
			send_message(servingCustomer.conn, '[ TELLER ] What can I help you with?\n')

			send_message(
				conn,
				`[CUSTOMER ACCOUNT]
				   Status:Active
				   Balance: ${servingCustomer.balance}`
			  )

		}

		// Recieved a message with no connected tellers
		else if (!connectedTellers.length) {
			send_message(conn, `The Bank is ${red('closed')}`)
			send_message(conn, `[ SYSTEM ] The Bank is ${red('closed')}`)
		}
		else if (type === 'customer') {
			send_message(conn, `[ SYSTEM ] You are not currently being served.`)
		}
		// send_message(conn, `I, the Bank, received: ${message}`)
	})


	conn.on('close', () => {
		console.log('client disconnected')
	})
})










server.listen(SOCKET)
console.log(`Bank server is listening...`)


process.on('exit', shutdown)
process.on('SIGINT', shutdown)
process.on('SIGTERM', shutdown)

process.on('uncaughtException', function (err) {
	console.log('Uncaught ERROR:', err)
})

function shutdown() {
	server.close()
	process.exit()
}
