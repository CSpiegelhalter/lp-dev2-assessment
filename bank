#!/usr/bin/env node

const net = require('net')
const { handle_message, send_message, red, green, Customer, Teller, guidGenerator, updateChat, toNumber } = require('./lib/helpers')
const SOCKET = "./bank.sock"
// let Customer = require('./customer')

let connectedTellers = []
let connectedCustomers = []
let currentlyBeingServed = []
let customerCount = 1
let openForTheDay = false

/**
 * Alerts each customer of their queue position 
 */
function displayQueuePosition() {
	if (connectedCustomers.length) {
		connectedCustomers.map((customer, index) => {
			// First connected teller means bank is now open!
			if (!openForTheDay) {
				send_message(customer.conn, `The Bank is ${green('open.')}`)
			}

			// Next customer in line
			if (index === 0) {
				send_message(customer.conn, 'You are the next customer to be served.')
			}
			// Every other customer
			else {
				send_message(
					customer.conn,
					`There is ${connectedCustomers.length -
					1} customers in line ahead of you`
				)
			}

		})
	}
	if (!openForTheDay) openForTheDay = true
}

function inChat(current, message) {
	

	let id = current.serverId

	let server = connectedTellers.find((teller) => teller.serverId === id)
	let customer = currentlyBeingServed.find((cust) => cust.serverId === id)

	updateChat(current, server, customer, message)

	message = message.split(' ')

	// Set everything to lowercase to easily compare
	const lower = message.map(element => {
		return element.toLowerCase();
	  })

	  if (lower.includes('withdraw') && current.role === 'customer') {
		let withdrawAmount
		// Grabs the amount that comes after the word withdraw
		try {
		withdrawAmount = toNumber(lower[lower.indexOf('withdraw')+ 1])
		} catch {
			updateChat(current, server, customer, 'Invalid withdraw statement... Try again with a dollar amount')
			return
		}

		let remainingBalance = customer.balance - withdrawAmount 
		let willOverdraft = remainingBalance < 0
		send_message(server.conn, `[ CUSTOMER ACCOUNT ]\nStatus: Active\nBalance: $${customer.balance}\n\n[ TRANSACTION: WITHDRAWAL $${withdrawAmount} ]\nWill overdraft: ${willOverdraft ? 'Yes' : 'No'}\nDo you approve? (Yes/No)`)

		send_message(customer.conn, '[ TELLER ] Please wait while I review the transaction...')



	}



}

// TCP Server using a Unix socket
const server = net.createServer(conn => {

	handle_message(conn, packet => {
		let message = packet.message
		let type = packet.type

		let currentConnections = [...currentlyBeingServed, ...connectedTellers]
		let current = currentConnections.find((connection) => connection.conn === conn)



		if (current && current.serverId) {
			inChat(current, message)
		}
		// Checks for customer connection
		else if (message === 'connected' && type === 'customer') {
			console.log('Customer connected')
			const customer = new Customer(customerCount, conn, null)
			connectedCustomers.push(customer)
			customerCount++

			// No tellers connected
			if (!connectedTellers.length) {
				send_message(conn, `The Bank is ${red('closed.')}`)
			}
		}

		// Checks for teller connection
		else if (message === 'connected' && type === 'teller') {
			console.log('Teller connected')
			let teller = new Teller(null, conn)
			connectedTellers.push(teller)

			send_message(conn, `Good Morning\nYou are not serving any customers\nYou have ${connectedCustomers.length} customers waiting in line\n`)

			displayQueuePosition()

		}
		else if (message === 'next' && type === 'teller' && connectedCustomers.length) {
			let currentTeller = connectedTellers.find((teller) => teller.conn === conn)
			let servingCustomer = connectedCustomers.shift()
			currentlyBeingServed.push(servingCustomer)
			let newUid = guidGenerator()
			currentTeller.serverId = newUid
			servingCustomer.serverId = newUid
			send_message(conn, `You are serving customer #${servingCustomer.customerCount}.\nYou have ${connectedCustomers.length} customer(s) waiting in line.\n\n[ CHAT ]\n(you) What can I help you with?\n\n[CUSTOMER ACCOUNT]\nStatus:Active\nBalance: ${servingCustomer.balance}\n`)

			displayQueuePosition()

			send_message(servingCustomer.conn, '[ CHAT ]\n[ TELLER ] What can I help you with?\n')


		}

		// Recieved a message with no connected tellers
		else if (!connectedTellers.length) {
			send_message(conn, `The Bank is ${red('closed')}\n[ SYSTEM ] The Bank is ${red('closed')}`)
		}
		else if (type === 'customer') {
			send_message(conn, `[ SYSTEM ] You are not currently being served.`)
		}
	})


	conn.on('close', () => {
		console.log('client disconnected')
	})
})










server.listen(SOCKET)
console.log(`Bank server is listening...`)


process.on('exit', shutdown)
process.on('SIGINT', shutdown)
process.on('SIGTERM', shutdown)

process.on('uncaughtException', function (err) {
	console.log('Uncaught ERROR:', err)
})

function shutdown() {
	server.close()
	process.exit()
}
