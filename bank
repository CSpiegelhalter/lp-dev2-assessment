#!/usr/bin/env node

const net = require('net')
const { handle_message, send_message, red, green } = require('./lib/helpers')
const SOCKET = "./bank.sock"

let connectedTellers = []
let connectedCustomers = []

// TCP Server using a Unix socket
const server = net.createServer(conn => {
	console.log('client connected')


	handle_message(conn, message => {
		console.log('received:', message)

		// Checks for customer connection
		if (message === 'customer') {
			console.log('Customer connected')
			connectedCustomers.push(conn)

			// No tellers connected
			if (!connectedTellers.length) {
				send_message(conn, `The Bank is ${red('closed.')}`)
			}
		}

		// Checks for teller connection
		else if (message === 'teller') {
			console.log('Teller connected')
			connectedTellers.push(conn)

			send_message(conn, 'Good Morning\n')
			send_message(conn, 'You are not serving any customers\n')
			send_message(
				conn,
				`You have ${connectedCustomers.length} customers waiting in line`
			)

			connectedCustomers.map((customer, index) => {
				// First connected teller means bank is now open!
				if (connectedTellers.length === 1) {
					send_message(customer, `The Bank is ${green('open.')}`)
				}

				// Next customer in line
				if (index === 0) {
					send_message(customer, 'You are the next customer to be served.')
				}
				// Every other customer
				else {
					send_message(
						customer,
						`There is ${connectedCustomers.length -
						  1} customers in line ahead of you`
					  )
				}

			})
		}

		// Recieved a message with no connected tellers
		else if (!connectedTellers.length) {
			send_message(conn, `The Bank is ${red('closed')}`)
			send_message(conn, `[ SYSTEM ] The Bank is ${red('closed')}`)
		}
		else {
			send_message(conn, `[ SYSTEM ] You are not currently being served.`)
		}
		// send_message(conn, `I, the Bank, received: ${message}`)
	})


	conn.on('close', () => {
		console.log('client disconnected')
	})
})










server.listen(SOCKET)
console.log(`Bank server is listening...`)


process.on('exit', shutdown)
process.on('SIGINT', shutdown)
process.on('SIGTERM', shutdown)

process.on('uncaughtException',function(err){
	console.log('Uncaught ERROR:', err)
})

function shutdown() {
	server.close()
	process.exit()
}
